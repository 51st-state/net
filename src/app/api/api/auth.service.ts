/**
 * orbisapi
 * Polls is a simple API allowing consumers to view polls and vote in them.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Problem } from '../model/problem';
import { RefreshToken } from '../model/refreshToken';
import { TokenPair } from '../model/tokenPair';
import { UserCredentials } from '../model/userCredentials';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AuthService {

    protected basePath = 'https://api.test.51st.de';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Login into the API
     * Retrieves an access- and refresh token keypair to use api resources.
     * @param UserCredentials the login credentials to login with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public login(UserCredentials: UserCredentials, observe?: 'body', reportProgress?: boolean): Observable<TokenPair>;
    public login(UserCredentials: UserCredentials, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TokenPair>>;
    public login(UserCredentials: UserCredentials, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TokenPair>>;
    public login(UserCredentials: UserCredentials, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (UserCredentials === null || UserCredentials === undefined) {
            throw new Error('Required parameter UserCredentials was null or undefined when calling login.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TokenPair>(`${this.configuration.basePath}/auth/login`,
            UserCredentials,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Login into the API with a recaptcha token
     * Retrieves an access- and refresh token keypair to use api resources.
     * @param X_Recaptcha_Response_Token 
     * @param UserCredentials the login credentials to login with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recaptchaLogin(X_Recaptcha_Response_Token: string, UserCredentials: UserCredentials, observe?: 'body', reportProgress?: boolean): Observable<TokenPair>;
    public recaptchaLogin(X_Recaptcha_Response_Token: string, UserCredentials: UserCredentials, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TokenPair>>;
    public recaptchaLogin(X_Recaptcha_Response_Token: string, UserCredentials: UserCredentials, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TokenPair>>;
    public recaptchaLogin(X_Recaptcha_Response_Token: string, UserCredentials: UserCredentials, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (X_Recaptcha_Response_Token === null || X_Recaptcha_Response_Token === undefined) {
            throw new Error('Required parameter X_Recaptcha_Response_Token was null or undefined when calling recaptchaLogin.');
        }
        if (UserCredentials === null || UserCredentials === undefined) {
            throw new Error('Required parameter UserCredentials was null or undefined when calling recaptchaLogin.');
        }

        let headers = this.defaultHeaders;
        if (X_Recaptcha_Response_Token !== undefined && X_Recaptcha_Response_Token !== null) {
            headers = headers.set('X-Recaptcha-Response-Token', String(X_Recaptcha_Response_Token));
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TokenPair>(`${this.configuration.basePath}/auth/login/recaptcha`,
            UserCredentials,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Login into the API with a recaptcha token
     * Retrieves an access- and refresh token keypair to use api resources.
     * @param RefreshToken the refresh token to be used
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refreshToken(RefreshToken: RefreshToken, observe?: 'body', reportProgress?: boolean): Observable<TokenPair>;
    public refreshToken(RefreshToken: RefreshToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TokenPair>>;
    public refreshToken(RefreshToken: RefreshToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TokenPair>>;
    public refreshToken(RefreshToken: RefreshToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (RefreshToken === null || RefreshToken === undefined) {
            throw new Error('Required parameter RefreshToken was null or undefined when calling refreshToken.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TokenPair>(`${this.configuration.basePath}/auth/refresh`,
            RefreshToken,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
